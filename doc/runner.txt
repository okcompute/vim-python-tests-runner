*runner.txt*	 For Vim version 7.4	 Last change: 2014 December 4th

An improved vim compiler for *running* tests written in Python programming
language.

Author:  Pascal Lalancette <okcompute@icloud.com>
License: Same terms as Vim itself (see |license|)

==============================================================================
CONTENTS                                               *runner-contents*

    1. Introduction.................................|runner-intro|
    2. Requirements.................................|runner-requirements|
    2. Supported test runners.......................|runner-supported|
    3. Virtualenv...................................|runner-virtualenv|
    4. Configuration................................|runner-configuration|
    4. Commands.....................................|runner-commands|
    5. Running last test............................|runner-last-test|
    6. About........................................|runner-about||

==============================================================================
INTRODUCTION                                            *runner*

This plugin improve on Vim compiler option for running tests.

Main features:

    -   Isolate tests running session. Run a specific test, a test case, a test
        module or all tests within a git repository.
    -   Memorize last test ran. The last test will run if commands are called
        in `non-test` source file.
    -   Improved Vim *errorformat* detection. *quickfix* window will show the
        correct error lines (surprisingly, it was not intuitive as one would
        think to enable!)

==============================================================================
REQUIREMENTS                                            *runner-requirements*

For this plugin to have some values, you need this requirements to be
installed in your environment:
    -   Python 2.7+ or python 3.0+

These requirement are optional but improve the plugin usage:
    -   git
    -   {vim-dispatch} by Tim Pope to run tests asynchronously
        (https://github.com/tpope/vim-dispatch).

==============================================================================
SUPPORTED TEST RUNNERS                                  *runner-supported*

    * nose (http://nose.readthedocs.org)
    * pytest (http://pytest.org)

==============================================================================
VIRTUALENV                                              *runner-virtualenv*


The plugin needs to be aware of `Python` virtual environment (if any) required
to run tests.


To discover {virtualenv}, the plugin will look into three places (in order):
    1. |runner-venv-file| A virtualenv description file.
    2. |runner-git_config| An option configured in git.
    3. $VIRTUALENV environment variable

If none of these are available, tests will be ran in system environment.

                                                        *runner-venv-file*
1.1. .venv file~

Expected virtualenv configuration filename is *.venv*. It should be located at
the root of the project.

Example: Set `Python` {virtualenv} configuration in project X , at the
root of the project:

 \.venv             <= {virtualenv} config file
 \venv              <= {virtualenv} folder
 \source.py
 \test.py

The content of the file would simply be :
.venv

                                                        *runner-git-config*
1.2. Git configuration~

If you don't want to have extra file polluting your project, a local git
configuration can be used.

For example, to configure `Python` {virtualenv} folder which is located at \{git
root}\venv:

    git config --local vim-python-tests-runner.venv venv

==============================================================================
CONFIGURATION                                           *runners-configuration*

                                                         *'g:python_tests_runner'*
To select runner, use this global option.

Example: let g:python_tests_runner = 'nose'

Available runner: 'nose' or 'pytest'

Default: 'pytest'

==============================================================================
COMMANDS                                                *runner-commands*

These commands are available only for file types with registered runner.

                                                        *runner-:RunTest*
:RunTest                Run the current test surrounding the cursor position.
                        Otherwise, run all tests in the scope the cursor is
                        located in (i.e. test case or module).

                                                        *runner-:RunTest!*
:RunTest!               Like |:RunTest| but will start an interactive shell
                        instead of running in the background. This is useful
                        for debugging your test or program (ex.: pdb or ipdb).

                                                        *runner-:RunCase*
:RunCase                Run all tests found in the test case surrounding the
                        cursor position. If cursor is outside a test case
                        scope, all tests for the module (buffer) are run.

                                                        *runner-:RunCase!*
:RunCase!               Like |:RunCase| but will start an interactive shell
                        instead of running in the background. This is useful
                        for debugging your test or program (ex.: pdb or ipdb).

                                                        *runner-:RunModule*
:RunModule              Run all tests found in the current module (buffer).

                                                        *runner-:RunModule!*
:RunModule!             Like |:RunModule| but will start an interactive shell
                        instead of running in the background. This is useful
                        for debugging your test or program (ex.: pdb or ipdb).

                                                        *runner-:RunAll*
:RunAllTests            Run all tests found in the git repository of the
                        edited buffer.

                                                        *runner-:RunAll!*
:RunAllTests!           Like |:RunAll| but will start an interactive shell
                        instead of running in the background. This is useful
                        for debugging your test or program (ex.: pdb or ipdb).

==============================================================================
RUNNING LAST TEST                                       *runner-last-test*

The plugin will *memorize* the last test, case or module used for these three commands:

    |:RunTest|
    |:RunCase|
    |:RunModule|

If any of these commands are called outside of a test source file, the last
test, case or module will be used. This is really useful for example when
doing TDD. You write the test. Call `:RunTest`. It fails. Switch focus to
source file. Add code. Call `:RunTest`. etc.


==============================================================================
ABOUT                                                   *runner-about*

Grab the latest version or report a bug on GitHub:

http://github.com/okcompute/vim-python-tests-runner

 vim:tw=78:et:ft=help:norl:
